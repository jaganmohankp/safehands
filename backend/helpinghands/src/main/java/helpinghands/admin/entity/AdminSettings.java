package helpinghands.admin.entity;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Type;

/**
 * 
 *
 * @version 1.0
 *
 */
@Entity
public class AdminSettings {
	
	/**
	 * The identifier that will be created automatically by the database's sequence generator as specified
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "settings_gen")
	@SequenceGenerator(initialValue = 1, allocationSize = 1, name = "settings_gen", sequenceName = "settings_sequence")
	private Long id;
	
	/**
	 * The window status will be represented by the boolean value
	 * TRUE if the current window is active, FALSE otherwise
	 */
	@Column(name = "window_status")
	@Type(type = "boolean")
	private Boolean windowStatus;
	
	/**
	 * The datetime whereby the requesting window was officially opened
	 */
	@Temporal(TemporalType.DATE)
	private Date windowStartDateTime;
	
	/**
	 * The datetime whereby the requesting window will be closed
	 */
	@Temporal(TemporalType.DATE)
	private Date windowsEndDateTime;
	
	/**
	 * The decay rate is a modifier that adjusts the beneficiary score at the end of every window
	 */
	private Double decayRate;
	
	/**
	 * The multiplier rate is a modifier that adjusts the beneficiary score at the end of every window
	 */
	private Double multiplierRate;
	
	/**
	 * The daily password is automatically generated by the system on a daily basis to ensure system security
	 */
	private String dailyPassword;
	
	/**
	 * The date whereby the previous window was opened
	 * This date is used in conjunction with the lastEndDate to identify requests made in the current window
	 */
	@Temporal(TemporalType.DATE)
	private Date lastStartDate;
	
	/**
	 * The date whereby the previous window was closed
	 * This date is used in conjunction with the lastStartDate to identify requests made in the current window
	 */
	@Temporal(TemporalType.DATE)
	private Date lastEndDate;
	
	/**
	 * Empty constructor that should not be initialized
	 * Required for Spring injection
	 */
	protected AdminSettings() {}
	
	/**
	 * Constructor that allows for the initialization of the Admin Settings
	 * @param windowStatus
	 * @param windowStartDateTime
	 * @param windowsEndDateTime
	 * @param decayRate
	 * @param multiplierRate
	 * @param dailyPassword
	 */
	public AdminSettings(Boolean windowStatus, Date windowStartDateTime, Date windowsEndDateTime, Double decayRate,
			Double multiplierRate, String dailyPassword) {
		this.windowStatus = windowStatus;
		this.windowStartDateTime = windowStartDateTime;
		this.windowsEndDateTime = windowsEndDateTime;
		this.decayRate = decayRate;
		this.multiplierRate = multiplierRate;
		this.dailyPassword = dailyPassword;
	}
	
	/**
	 * 
	 * @return The unique identifier for the admin settings object
	 */
	public Long getId() {
		return id;
	}

	/**
	 * Sets the Id for the admin settings
	 * This is a method that should never be called
	 * @param id
	 */
	public void setId(Long id) {
		this.id = id;
	}
	
	/**
	 * 
	 * @return The window status in the form of a boolean value, TRUE if window is active, FALSE otherwise
	 */
	public Boolean getWindowStatus() {
		return windowStatus;
	}
	
	/**
	 * Sets the status of the current window
	 * @param windowStatus
	 */
	public void setWindowStatus(Boolean windowStatus) {
		this.windowStatus = windowStatus;
	}
	
	/**
	 * 
	 * @return The Date object that represents the start date of the window
	 */
	public Date getWindowStartDateTime() {
		return windowStartDateTime;
	}
	
	/**
	 * Sets the start date of the current window
	 * @param windowStartDateTime
	 */
	public void setWindowStartDateTime(Date windowStartDateTime) {
		this.windowStartDateTime = windowStartDateTime;
	}
	
	/**
	 * 
	 * @return The Date object that represents the end date of the window
	 */
	public Date getWindowsEndDateTime() {
		return windowsEndDateTime;
	}
	
	/**
	 * Sets the end date of the current window
	 * @param windowsEndDateTime
	 */
	public void setWindowsEndDateTime(Date windowsEndDateTime) {
		this.windowsEndDateTime = windowsEndDateTime;
	}
	
	/**
	 * 
	 * @return The decay rate modifier that is currently stored in the system
	 */
	public Double getDecayRate() {
		return decayRate;
	}
	
	/**
	 * Sets the decay rate modifier to be stored in the system
	 * @param decayRate
	 */
	public void setDecayRate(Double decayRate) {
		this.decayRate = decayRate;
	}
	
	/**
	 * 
	 * @return The multiplier rate modifier that is currently stored in the system
	 */
	public Double getMultiplierRate() {
		return multiplierRate;
	}

	/**
	 * Sets the multiplier rate modifier to be stored in the system
	 * @param multiplierRate
	 */
	public void setMultiplierRate(Double multiplierRate) {
		this.multiplierRate = multiplierRate;
	}
	
	/**
	 * 
	 * @return The daily password that has been automatically generated by the system
	 */
	public String getDailyPassword() {
		return dailyPassword;
	}
	
	/**
	 * Sets the daily password to be stored in the system
	 * This is a method that should not be called by any users and should only be used in code affecting the system settings
	 * @param dailyPassword
	 */
	public void setDailyPassword(String dailyPassword) {
		this.dailyPassword = dailyPassword;
	}
	
	/**
	 * 
	 * @return The Date object that represents the last start date of the most recent window that has passed
	 */
	public Date getLastStartDate() {
		return lastStartDate;
	}

	/**
	 * Sets the last start date for the most recent window that has passed
	 * @param lastStartDate
	 */
	public void setLastStartDate(Date lastStartDate) {
		this.lastStartDate = lastStartDate;
	}

	/**
	 * 
	 * @return The Date object that represents the last end date of the most recent window that has passed
	 */
	public Date getLastEndDate() {
		return lastEndDate;
	}
	
	/**
	 * Sets the last end date for the most recent window that has passed
	 * @param lastEndDate
	 */
	public void setLastEndDate(Date lastEndDate) {
		this.lastEndDate = lastEndDate;
	}
	
}
